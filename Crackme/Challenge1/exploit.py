from pwn import *


binary = "./challenge"
context.arch = "amd64"
context.binary = binary
context.terminal = ['tmux', 'splitw', '-h']

# The secret value we want to get
hex_string = "83 4a 64 91 25 59 ef 06 fd a4 2c 20 03 45 b7 57 8f c4 49 18 50 2e 70 16 c6 94 f4 f6 01 e0 7b fd 68 a1 b8 4f c0 30"
arr = bytearray(int(val,16) for val in hex_string.split())
length = len(arr)

def rev_func(arr):
    for i in range(length//2):
        temp = arr[i] 
        arr[i] = arr[length-1-i]
        arr[length-1-i] = temp
    print(f"After the reverse: {arr}")


# Doing the xor mod
def xor_mod_func(arr,modulo,key):
    # turning the key into a byte array
    key_arr = key.to_bytes(modulo,byteorder='big')
    for i in range(length):
        arr[i] = arr[i] ^ key_arr[i%modulo]

    print(f"After the xor mod {modulo}: {arr}")

# Doing the swap
def swap_func(arr,first,second):
    temp1 = arr[first]
    temp2 = arr[second]
    arr[second] = temp1
    arr[first] = temp2
    print(f"After the swap of {first} and {second}: {arr}")


# Doing the sort
def sort_func(arr):
    for i in range(length):
        for j in range(length-i-1):
            if arr[j+1]<arr[j]:
                temp = arr[j]
                arr[j] = arr[j+1]
                arr[j+1] = temp
    print(f"After the short: {arr}")

def start_pwn_process(payload):
    p = process(binary)
    if "GDB" in args:
        p = gdb.debug(binary,aslr=False,gdbscript='''
        b * $BASE + 0x1169
        b * $BASE + 0x16aa
        ''')
    p.sendlineafter(b'Enter the password:',payload)
    p.interactive()

def main():
    # The target performs these:
    # - swap index 1 3
    # - xor mod 2 with key 0x2aec
    # - reverse
    # - xor mod 6 with key 0x011cb11c4cd5
    # - xor mod 3 with key 0x7384b7
    # - swap index 12 20
    # - reverse
    # - xor mod 5 with key 0x29b3f159d5

    print(f"initially: {arr}")
    # We need to go backwards!
    xor_mod_func(arr,5,0x29b3f159d5)
    rev_func(arr)
    swap_func(arr,12,20)
    xor_mod_func(arr,3,0x7384b7)
    xor_mod_func(arr,6,0x011cb11c4cd5)
    rev_func(arr)
    xor_mod_func(arr,2,0x2aec)
    swap_func(arr,1,3)
    print(f"After all the manging: {arr}")


    # Starting the process to send
    payload = arr
    start_pwn_process(payload)

main()
